## JUST IN CASE THERE'S STILL PROBLEMS WITH EXTERNALLY LINKED STYLESHEETS
fuckers 

  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  <%= csrf_meta_tags %>

  <%= f.check_box :status, :class => "toggle", :checked => (true if item.complete?) %>

  ## SOURCES/ITEMS CODE
  Drop Down Menu Code: 
  <%= f.collection_select :genre_name, Genre.all, :name, :name %>
  collection_select(object, method, collection, value_method, text_method)

  For Add A Source, views code (items/_form): 
  <%= f.fields_for :sources, item.sources.build do |sources_fields| %>
    <%= sources_fields.text_field :name %>
  <% end %>
  
  For Add A Source, models code(Item): 
      def sources_attributes=(source_attributes)
        source_attributes.values.each do |source_att|
        #Take the value of the source_attributes part of the hash in item params and iterate over its values (just the one)
          source = Source.find_or_create_by(name: source_att)
          byebug
          #Assign a variable name and find or create the source by name, that being the source attribute
          #self.item_sources.build(source: source)
          self.sources << source 
          #Add in the source to the join table for items to sources
        end
    end

    def sources_attributes
        #This space intentionally left blank because what this returns populates the field in the Add a Source space.
    end

  For Add a Source: controller code(items_controller): 
  def item_params
        params.require(:item).permit(:name, :material, :creator, :publication_date, :list_id, source_ids:[], sources_attributes: [:name])
        #The sources attributes must be for adding a new source by name
        #In which case maybe if you add a new source by name redirect to that new source's edit page to fill out the junk for it.
    end 

## WELL, THIS DIDN'T WORK

<p>Add a Source:<br>
<%= render "sources/new" @source: Source.new %></p>

<p><%= @user.display_name %> has <%= @user.projects.count %> projects.</p> (dig up the pluralize method dammit)

## PROBABLY DON'T NEED THIS
<p><%= f.label "List" %> <%= f.text_field :name, list: "lists_autocomplete" %>
<datalist id="lists_autocomplete">
    <% @lists.each do |list| %>
        <option value="<%= list.name %>">
    <% end %>
</datalist>
</p>

## CAPYBARA REALLY DOESN'T LIKE THIS 
 <p><%= f.label "Cost?" %>
    <%= f.check_box :fee %><br>
    (Check if there is a fee to access material at this source, or if the source is a store.)</p>

## STUFF FROM VIDEOS

<%= pet.user.try(:name) %> to print the pet's owner's name. 
def new 
if params[:vet_id] && @vet = Vet.find(params[:vet_id]) meaning, if there is a params indicating a nested route and I can set that params equal to an instance
@pet = @vet.pets.build 
else 
@pet = Pet.new
end 
---------------------
If we do end up wanting to nest lists under projects, which we might do just for index?
def index 
 if params[:project_id] && @project = Project.find(params[:project_id])
@lists = @project.lists 
else 
@lists = List.all 
and then you can nest some search params like in the source thing in here.
end 

in the routes:

resources: projects do 
resources: lists, only: [:index]
end 
--------------------
<%= f.text_field :username, required: true %> will work to prevent people from submitting if they haven't filled in the filled
but it is NOT a substitute for validations in the model.
--------------------
Errors!
Between form for and the first field 
<ul>
<% @user.errors.full_messages.each do |msg| %>
<li><%= msg %> </li>
<% end %>
</ul>

To make the error message a partial
<%= render partial: 'layout/errors', local: {object: @thingie} %>

## FROM THE ROUTES. NOT SURE WHY THIS STAYED IN THERE.
  # resources :authors, only: [:show] do
  # #OLD AND BUSTED
  # #get 'authors/:id/posts', to: "authors#posts_index"
  # #Must put the posts_index method in the controller
  # #get 'authors/:id/posts/:post_id', to: "authors#post"
  #   resources :posts, only: [:show, :index]
  # end 

## SCOPE FORMATS

#scope :order_by_age, -> {order(:age)}
    #scope :older_animals, -> {where("age > ?", 7)}
    #scope :dogs, -> {where(species: "Dog")}
    #scope :cats, -> {where(species: "Cat")}
    #scope :fish, -> {where(species: "Fish")}

    #scope :search_by_age, -> (search_age){where("age = ?", search_age)}

    #in controller: @pets = Pet.search_by_age(params[:age]).order_by_age 


